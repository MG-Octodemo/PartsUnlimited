name: "Build - Test - Deploy"
on:
  push
env:
  buildConfiguration: Release
  buildPlatform: Any CPU
  solution: "PartsUnlimited-aspnet45/PartsUnlimited.sln"
jobs:
  build:
    name: build & test ðŸš§
    runs-on: windows-2019
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - uses: nuget/setup-nuget@v1
    - run: nuget restore ${{ env.solution }}
    - name: install msbuild
      uses: microsoft/setup-msbuild@v1.0.2
    - name: run msbuild
      run: msbuild ${{ env.solution }} /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="${{ runner.temp }}" -p:Configuration=${{ env.buildConfiguration }} -p:Platform="${{ env.buildPlatform }}"
    - name: Setup VSTest Path
      uses: darenm/Setup-VSTest@v1
    - name: Install Dependencies for VSTest
      shell: pwsh
      run: |-
        Set-PSRepository PSGallery -InstallationPolicy Trusted
        Install-Module VstsTaskSdk -AllowClobber
    - name: Executing VSTest
      env:
        SEARCH_FOLDER: "${{ github.workspace }}"
        TEST_RESULTS_FOLDER: "${{ runner.temp }}/${{ github.run_id }}_resultsfolder"
        PATTERN: "**\\*test*.dll;!**\\*TestAdapter.dll;!**\\obj\\**"
        ARGS: "/Logger:trx"
      shell: pwsh
      run: |-
        Import-Module -Name VstsTaskSdk
        $SearchPattern = $env:PATTERN.Split(';').Trim()
        Write-Host "Search Pattern: " $SearchPattern
        Write-Host "Finding files for VSTest to execute.."
        $files = Find-VstsMatch -DefaultRoot $env:SEARCH_FOLDER -Pattern $SearchPattern
        Write-Host "Files found:" $files
        $exe = "vstest.console.exe"
        $args = $env:ARGS.Split(';').Trim()
        Write-Host "Arguments are: " $args
        & $exe $files /ResultsDirectory:$env:TEST_RESULTS_FOLDER $args
    - name: Copy Files
      uses: actions/github-script@v3
      env:
        TARGET_FOLDER: "${{ runner.temp }}"
        SOURCE_FOLDER: "${{ github.workspace }}"
        CLEAN_TARGET_FOLDER: false
        FLATTEN_FOLDERS: false
        OVERWRITE: false
        CONTENTS: "**/*.json"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |-
          const fs = require('fs').promises
          const path = require('path')
          const target = path.resolve(process.env.TARGET_FOLDER)
          process.chdir(process.env.SOURCE_FOLDER || '.')
          if (process.env.CLEAN_TARGET_FOLDER === 'true') await io.rmRF(target)
          const flattenFolders = process.env.FLATTEN_FOLDERS === 'true'
          const options = {force: process.env.OVERWRITE === 'true'}
          const globber = await glob.create(process.env.CONTENTS || '**')
          for await (const file of globber.globGenerator()) {
            if ((await fs.lstat(file)).isDirectory()) continue
            const filename = flattenFolders ? path.basename(file) : file.substring(process.cwd().length)
            const dest = path.join(target, filename)
            await io.mkdirP(path.dirname(dest))
            await io.cp(file, dest, options)
          }
    - name: Test Report
      env:
        TEST_RESULTS_FOLDER: "${{ runner.temp }}/${{ github.run_id }}_resultsfolder/*.trx"
      uses: dorny/test-reporter@v1
      if: success() || failure()  
      with:
        name: .Net Tests            
        path: "${{ env.TEST_RESULTS_FOLDER }}"
        reporter: dotnet-trx
    - name: Upload Build binaries
      uses: actions/upload-artifact@v2
      with:
        name: BuildResultsFile
        path: "${{ runner.temp }}"
  release:
    name: release ðŸš¢
    needs:
    - build
    uses: ./.github/workflows/release-workflow.yml
    secrets:
      inherit
